trigger:
  batch: true
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: templates
      type: github
      name: AVEVA/AVEVA-Samples
      endpoint: AVEVA

variables:
  - name: analysisProject
    value: OMF_DC_NodeJS

parameters:
  - name: poolADH
    default: DevOps-Managed-Ubt22-Mdp
  - name: containerDemandsADH
    type: object
    default: ['Agent.OS -equals Windows_NT']
  - name: poolPI
    default: DevOps-Managed-Ubt22-Mdp
  - name: containerDemandsPI
    type: object
    default: ['Agent.OS -equals Windows_NT']
  - name: poolEDS
    default: 00-OSIManaged-Build
  - name: containerDemandsEDS
    type: object
    default: ['SKU -equals VSEnterprise2022']

jobs:
  - job: Tests_ADH
    pool:
      name: ${{ parameters.poolADH }}
      demands: ${{ parameters.containerDemandsADH }}
    variables:
      - name: Endpoints.0.Selected
        value: true
      - name: Endpoints.1.Selected
        value: false
      - name: Endpoints.2.Selected
        value: false
      - name: Endpoints.0.TenantId
        value: $(TenantId)
      - name: Endpoints.0.NamespaceId
        value: $(NamespaceId)
      - name: Endpoints.0.ClientId
        value: $(ClientId)
      - name: Endpoints.0.ClientSecret
        value: $(ClientSecret)
      - name: Endpoints.0.Resource
        value: $(Resource)
    steps:
      - template: '/miscellaneous/build_templates/appsettings.yml@templates'
        parameters:
          secrets: 'TenantId, NamespaceId, ClientId, ClientSecret, Resource'

      - script: npm ci
        displayName: 'Install dependencies'

      - script: npm test
        displayName: 'Run tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '*.xml'
          failTaskOnFailedTests: true
          searchFolder: '$(Build.SourcesDirectory)/TestResults'
          testRunTitle: '$(Agent.JobName) on $(Agent.OS)'
        displayName: 'Publish test results'
        condition: always()

  - job: Tests_OnPrem
    pool:
      name: ${{ parameters.poolPI }}
      demands: ${{ parameters.containerDemandsPI }}
    variables:
      - name: Endpoints.0.Selected
        value: false
      - name: Endpoints.1.Selected
        value: false
      - name: Endpoints.2.Selected
        value: true
      - name: Endpoints.2.Resource
        value: $(PIWebAPI)
      - name: Endpoints.2.Username
        value: $(Username)
      - name: Endpoints.2.Password
        value: $(Password)
      - name: Endpoints.2.DataArchiveName
        value: $(DataArchiveName)
      - name: Endpoints.2.VerifySSL
        value: false
    steps:
      - template: '/miscellaneous/build_templates/appsettings.yml@templates'
        parameters:
          secrets: 'Username, Password, PIWebAPI, DataArchiveName'

      - script: npm ci
        displayName: 'Install dependencies'

      - script: npm test
        displayName: 'Run tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '*.xml'
          failTaskOnFailedTests: true
          searchFolder: '$(Build.SourcesDirectory)/TestResults'
          testRunTitle: '$(Agent.JobName) on $(Agent.OS)'
        displayName: 'Publish test results'
        condition: always()
        
  - job: Tests_EDS
    pool:
      name: ${{ parameters.poolEDS }}
      demands: ${{ parameters.containerDemandsEDS }}
    variables:
      - name: Endpoints.0.Selected
        value: false
      - name: Endpoints.1.Selected
        value: true
      - name: Endpoints.2.Selected
        value: false
    steps:
      - template: '/miscellaneous/build_templates/appsettings.yml@templates'

      - script: npm ci
        displayName: 'Install dependencies'

      - script: npm test
        displayName: 'Run tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '*.xml'
          failTaskOnFailedTests: true
          searchFolder: '$(Build.SourcesDirectory)/TestResults'
          testRunTitle: '$(Agent.JobName) on $(Agent.OS)'
        displayName: 'Publish test results'
        condition: always()
